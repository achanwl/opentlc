- name: Annotate heketi-storage service
  k8s:
    state: present
    namespace: glusterfs
    api_version: v1
    kind: Service
    name: heketi-storage
    definition:
      metadata:
        annotations:
          prometheus.io/scheme: http
          prometheus.io/scrape: "true"

- name: Create hekieti servicemonitor
  k8s:
    state: present
    definition:
      apiVersion: monitoring.coreos.com/v1
      kind: ServiceMonitor
      metadata:
        name: heketi
        namespace: openshift-monitoring
        labels:
          k8s-app: heketi
      spec:
        endpoints:
        - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
          interval: 10s
          port: heketi
          scheme: http
          targetPort: 0
        namespaceSelector:
          matchNames:
          - glusterfs
        selector:
          matchLabels:
            heketi: storage-service

- name: Add cluster-reader right
  command: oc -n openshift-monitoring adm policy add-cluster-role-to-user cluster-reader system:serviceaccount:openshift-monitoring:prometheus-k8s

- name: Get STATS_USERNAME
  command: oc -n default get dc/router -o jsonpath='{..env[?(@.name=="STATS_USERNAME")].value}'
  register: stats_username

- name: Get STATS_PASSWORD
  command: oc -n default get dc/router -o jsonpath='{..env[?(@.name=="STATS_PASSWORD")].value}'
  register: stats_password

- name: Create router stats secret
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: router-stats-auth
        namespace: openshift-monitoring
      type: Opaque
      data:
        username: "{{ stats_username.stdout | b64encode }}"
        password: "{{ stats_password.stdout | b64encode }}"

- name: Create router servicemonitor
  k8s:
    state: present
    definition:
      apiVersion: monitoring.coreos.com/v1
      kind: ServiceMonitor
      metadata:
        name: router-metrics
        namespace: openshift-monitoring
        labels:
          k8s-app: haproxy-router
      spec:
        endpoints:
        - basicAuth:
            username:
              name: router-stats-auth
              key: username
            password:
              name: router-stats-auth
              key: password
          interval: 10s
          path: /metrics
          port: 1936-tcp
          scheme: http
        jobLabel: k8s-app
        namespaceSelector:
          matchNames:
          - default
        selector:
          matchLabels:
            router: router

- name: Create rmetircs project
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: rmetrics
        annotations:
          openshift.io/node-selector: node-role.kubernetes.io/infra=true

- name: Create grafana datasource
  shell: oc -n openshift-monitoring get secret grafana-datasources --export -o yaml | oc -n rmetrics create -f -

- name: Create grafana dashboard provider
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: grafana-dashboards
        namespace: rmetrics
        labels:
          app: grafana
      data:
        haproxy.yaml: |
          apiVersion: 1
          providers:
          - name: 'HAProxy'
            folder: ''
            type: file
            disableDeletion: true
            editable: false
            allowUiUpdates: true
            options:
              path: /var/lib/grafana/dashboards/haproxy

- name: Get haproxy-full.json
  get_url:
    url: https://raw.githubusercontent.com/rfrail3/grafana-dashboards/master/prometheus/haproxy-full.json
    dest: ~/haproxy.json

- name: Set the default prometheus source
  replace:
    path: ~/haproxy.json
    regexp: '\$\{DS_LOCALHOST\}'
    replace: 'prometheus'

- name: Create grafana haporoxy dashboard
  command: oc -n rmetrics create cm grafana-dashboard-haproxy --from-file=$HOME/haproxy.json

- name: Create grafana pvc
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: grafana-data
        namespace: rmetrics
        labels:
          app: grafana
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi

- name: Create grafana dc
  k8s:
    state: present
    namespace: rmetrics
    definition: "{{ lookup('file', 'grafana-dc.yml') }}"

- name: Create grafana route
  k8s:
    state: present
    namespace: rmetrics
    definition:
      apiVersion: v1
      kind: Route
      metadata:
        name: grafana
        labels:
          app: grafana
      spec:
        to:
          kind: Service
          name: grafana
        port:
          targetPort: 3000-tcp
        tls:
          termination: edge
          insecureEdgeTerminationPolicy: Redirect
